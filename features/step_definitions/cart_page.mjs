import { Given, When, Then, After, setDefaultTimeout, Before } from "@dev-blinq/cucumber-js";
import { closeContext, initContext, navigate } from "automation_model";
setDefaultTimeout(60 * 1000);

const path = null;

const elements = {
  textbox_first_name: {
    locators: [
      { role: ["textbox", { name: "First name *" }] },
      { strategy: "ROLE_NAME", css: 'internal:role=textbox[name="First name"i]' },
      { strategy: "ROLE_NAME", css: 'internal:role=textbox[name="First name"s]' },
      { strategy: "ID_AUTOGEN", css: "#\\:r2\\:", priority: 3, autogenerated: true },
    ],
    element_name: "First name",
  },
  textbox_last_name: {
    locators: [
      { role: ["textbox", { name: "Last name *" }] },
      { strategy: "ROLE_NAME", css: 'internal:role=textbox[name="Last name"i]' },
      { strategy: "ROLE_NAME", css: 'internal:role=textbox[name="Last name"s]' },
      { strategy: "ID_AUTOGEN", css: "#\\:r3\\:", priority: 3, autogenerated: true },
    ],
    element_name: "Last name",
  },
  textbox_zip_postal_code: {
    locators: [
      { role: ["textbox", { name: "Zip/Postal code *" }] },
      { strategy: "ROLE_NAME", css: 'internal:role=textbox[name="Zip/Postal code"i]' },
      { strategy: "ROLE_NAME", css: 'internal:role=textbox[name="Zip/Postal code"s]' },
      { strategy: "ID_AUTOGEN", css: "#\\:r4\\:", priority: 3, autogenerated: true },
    ],
    element_name: "Zip/Postal code",
  },
  button_checko_firstname_t: {
    locators: [
      { css: "internal:text=/^{firstname}$/i", priority: 3 },
      { strategy: "ROLE_NAME", css: 'internal:role=button[name="CHECKO{firstname}T"i]', parameterDependent: true },
      { strategy: "ROLE_NAME", css: 'internal:role=button[name="CHECKO{firstname}T"s]', parameterDependent: true },
    ],
    element_name: "CHECKOUT button",
  },
  button_contin_firstname_e: {
    locators: [
      { css: "internal:text=/^{firstname}$/i", priority: 3 },
      { strategy: "ROLE_NAME", css: 'internal:role=button[name="CONTIN{firstname}E"i]', parameterDependent: true },
      { strategy: "ROLE_NAME", css: 'internal:role=button[name="CONTIN{firstname}E"s]', parameterDependent: true },
    ],
    element_name: "CONTINUE",
  },
};

let context = null;
Before(async function () {
  if (!context) {
    context = await initContext(path, false, false, this);
  }
  await navigate(path);
});
After(async function () {
  await closeContext();
  context = null;
});
/**
 * checkout with first name "guy", last name "<firstname>", zip "100102" 1
 * @param {string} _first_name  first name
 * @param {string} _firstname  firstname
 * @param {string} _zip  zip
 * @ai
 */
async function checkout_with_first_name_first_name_last_name_firstname_zip_zip_1(_first_name, _firstname, _zip) {
  // source: ai
  // implemented_at: 2025-05-08T05:26:08.149Z
  const _params = { _first_name, _firstname, _zip };
  // Click on CHECKOUT button
  await context.web.click(elements["button_checko_firstname_t"], _params, null, this);
  // Fill First name with "_first_name"
  await context.web.clickType(elements["textbox_first_name"], _first_name, false, _params, null, this);
  // Fill Last name with "_firstname"
  await context.web.clickType(elements["textbox_last_name"], _firstname, false, _params, null, this);
  // Fill Zip/Postal code with "_zip"
  await context.web.clickType(elements["textbox_zip_postal_code"], _zip, false, _params, null, this);
  // Click on CONTINUE
  await context.web.click(elements["button_contin_firstname_e"], _params, null, this);
}

When(
  "checkout with first name {string}, last name {string}, zip {string} 1",
  { timeout: 360000 },
  checkout_with_first_name_first_name_last_name_firstname_zip_zip_1
);

/**
 * verify "Thank you for your order" can be found in the page
 * @param {string} _thank_you_message  thank you message
 * @ai
 */
async function verify_text_found_can_be_found_in_the_page(_thank_you_message) {
  // source: ai
  // implemented_at: 2025-05-08T05:26:08.215Z
  const _params = { _thank_you_message };
  // Verify page contains text "_thank_you_message"
  await context.web.verifyTextExistInPage(_thank_you_message, null, this);
}

Then("verify {string} can be found in the page", { timeout: 120000 }, verify_text_found_can_be_found_in_the_page);
